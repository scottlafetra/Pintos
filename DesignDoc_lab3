       	       	    +---------------------------+
		    |		CS 140		|
		    | PROJECT 3: VIRTUAL MEMORY	|
		    |	   DESIGN DOCUMENT	|
		    +---------------------------+

---- GROUP ----

>> Fill in the names and email addresses of your group members.

Scott La Fetra
Alex Reily

---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for the
>> TAs, or extra credit, please give them here.

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course staff.

			PAGE TABLE MANAGEMENT
			=====================

---- DATA STRUCTURES ----

>> A1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

// Entries for the swap table. Each entry contains a virtual address
// prefix and the physical address it should be mapped to.
struct st_entry
{
  struct hash_elem elem;
  struct sema sema_lock; // To allow multiple reads but not when changing the table
  u_int32 v_addr; // virtual page address
  void* p_addr; // physical page address
}

// "Table" that holds data for eviction. The accessed and dirty bits are accessed
// through the relevant pintos functions, so no actually hash table is necessary
// here.
struct frame_table
{
  struct ft_entry* evict_next;
  struct ft_entry* clock_ptr; // Used to turn off the access bit periodically
  u_int32 stack_end;
}

// Tracks open and used memory in the swap partition. These are kept in
// separate structs for quick access to the next free entry
struct swap_table
{
  struct list open; // A table of ft_entry. Hashed by v_addr
  struct hash used; // A table of ft_entry. Hashed by v_addr
}

// Page table entry. Maps virtual addresses to physical addresses
struct pt_entry
{
  struct hash_elem elem;
  u_int32 v_addr;
  u_int32 p_addr;
}

// The page table. Just contains a hash table of elements for translation.
struct page_table
{
  struct list table; // A table of pt_entry. Hashed by v_addr
}

// Supplemental page table entry. Tracks ownership of each page by process id.
struct supt_entry
{
  struct hash_elem elem;
  pid_t pid;
}

// The supplemental page table. Just contains a hash table of page ownership.
struct sup_table
{
  struct list table; // A table of pt_entry. Hashed by v_addr
}


---- ALGORITHMS ----

>> A2: In a few paragraphs, describe your code for locating the frame,
>> if any, that contains the data of a given page.

A user program asks for a page by it's virtual address. This goes to the (virtual) page_table where it is mapped to the correct frame index of the frame_table.
	If the page is on the frame_table we return it.
If the page isn't on the frame_table then we check the swap table.
	If it is on the swap then we allocate a new frame for it on the frame_table, return it's address to the user program, and then free the swap slot. 
	If it isn't on the swap then we go back to the frame_table and we grab the data from the hard drive, allocating a new space for it on the frame_table. We then return it.

>> A3: How does your code coordinate accessed and dirty bits between
>> kernel and user virtual addresses that alias a single frame, or
>> alternatively how do you avoid the issue?

Dirty bits are owned by the kernel virtual page table which the frame table interacts with. The frame table reads these bits from the kernel virtual page table and evicts based on that.

---- SYNCHRONIZATION ----

>> A4: When two user processes both need a new frame at the same time,
>> how are races avoided?

Reading from the frame table requires no synchronization, but if the frame isn't there or in the swap_table then we require locking a mutex before allocating a new frame. 

---- RATIONALE ----

>> A5: Why did you choose the data structure(s) that you did for
>> representing virtual-to-physical mappings?

		       PAGING TO AND FROM DISK
		       =======================

---- DATA STRUCTURES ----

>> B1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

// Entries for the swap table. Each entry contains a virtual address
// prefix and the physical address it should be mapped to.
struct st_entry
{
  struct hash_elem elem;
  struct sema sema_lock; // To allow multiple reads but not when changing the table
  u_int32 v_addr; // virtual page address
  void* p_addr; // physical page address
}

// "Table" that holds data for eviction. The accessed and dirty bits are accessed
// through the relevant pintos functions, so no actually hash table is necessary
// here.
struct frame_table
{
  struct ft_entry* evict_next;
  struct ft_entry* clock_ptr; // Used to turn off the access bit periodically
  u_int32 stack_end;
}

// Tracks open and used memory in the swap partition. These are kept in
// separate structs for quick access to the next free entry
struct swap_table
{
  struct list open; // A table of ft_entry. Hashed by v_addr
  struct hash used; // A table of ft_entry. Hashed by v_addr
}

---- ALGORITHMS ----

>> B2: When a frame is required but none is free, some frame must be
>> evicted.  Describe your code for choosing a frame to evict.

>> B3: When a process P obtains a frame that was previously used by a
>> process Q, how do you adjust the page table (and any other data
>> structures) to reflect the frame Q no longer has?

>> B4: Explain your heuristic for deciding whether a page fault for an
>> invalid virtual address should cause the stack to be extended into
>> the page that faulted.

---- SYNCHRONIZATION ----

>> B5: Explain the basics of your VM synchronization design.  In
>> particular, explain how it prevents deadlock.  (Refer to the
>> textbook for an explanation of the necessary conditions for
>> deadlock.)

>> B6: A page fault in process P can cause another process Q's frame
>> to be evicted.  How do you ensure that Q cannot access or modify
>> the page during the eviction process?  How do you avoid a race
>> between P evicting Q's frame and Q faulting the page back in?

>> B7: Suppose a page fault in process P causes a page to be read from
>> the file system or swap.  How do you ensure that a second process Q
>> cannot interfere by e.g. attempting to evict the frame while it is
>> still being read in?

>> B8: Explain how you handle access to paged-out pages that occur
>> during system calls.  Do you use page faults to bring in pages (as
>> in user programs), or do you have a mechanism for "locking" frames
>> into physical memory, or do you use some other design?  How do you
>> gracefully handle attempted accesses to invalid virtual addresses?

---- RATIONALE ----

>> B9: A single lock for the whole VM system would make
>> synchronization easy, but limit parallelism.  On the other hand,
>> using many locks complicates synchronization and raises the
>> possibility for deadlock but allows for high parallelism.  Explain
>> where your design falls along this continuum and why you chose to
>> design it this way.

We use semaphore locks for each entry. This allows multiple processes
can read the same entry, but requires that a process wait for all
reads to finish before changing the table. We chose this method because
it allowed for the most parallelism without unnessisary locks.

			 MEMORY MAPPED FILES
			 ===================

---- DATA STRUCTURES ----

>> C1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

---- ALGORITHMS ----

>> C2: Describe how memory mapped files integrate into your virtual
>> memory subsystem.  Explain how the page fault and eviction
>> processes differ between swap pages and other pages.

>> C3: Explain how you determine whether a new file mapping overlaps
>> any existing segment.

---- RATIONALE ----

>> C4: Mappings created with "mmap" have similar semantics to those of
>> data demand-paged from executables, except that "mmap" mappings are
>> written back to their original files, not to swap.  This implies
>> that much of their implementation can be shared.  Explain why your
>> implementation either does or does not share much of the code for
>> the two situations.

			   SURVEY QUESTIONS
			   ================

Answering these questions is optional, but it will help us improve the
course in future quarters.  Feel free to tell us anything you
want--these questions are just to spur your thoughts.  You may also
choose to respond anonymously in the course evaluations at the end of
the quarter.

>> In your opinion, was this assignment, or any one of the three problems
>> in it, too easy or too hard?  Did it take too long or too little time?

>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?

>> Is there some particular fact or hint we should give students in
>> future quarters to help them solve the problems?  Conversely, did you
>> find any of our guidance to be misleading?

>> Do you have any suggestions for the TAs to more effectively assist
>> students, either for future quarters or the remaining projects?

>> Any other comments?

