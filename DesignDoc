		     +--------------------------+
       	       	     |		CS 140		|
		     | PROJECT 2: USER PROGRAMS	|
		     | 	   DESIGN DOCUMENT     	|
		     +--------------------------+

---- GROUP ----

>> Fill in the names and email addresses of your group members.

Alex Riley
Scott La Fetra

---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for the
>> TAs, or extra credit, please give them here.

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course staff.

			   ARGUMENT PASSING
			   ================

---- DATA STRUCTURES ----

>> A1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

---- ALGORITHMS ----

>> A2: Briefly describe how you implemented argument parsing.  How do
>> you arrange for the elements of argv[] to be in the right order?
>> How do you avoid overflowing the stack page?

When the user page is initially created, each command line argument is pushed
onto the stack, then a list of pointers is pushed onto the stack in reverse 
order (argv[]), followed by argc. This is so that the filename can easilly be 
found from the stack pointer. (esp - 1)

To avoid overflowing the stack page, a check is made to make sure that all the
arguments can fit inside the inital page at creation-time.

---- RATIONALE ----

>> A3: Why does Pintos implement strtok_r() but not strtok()?

strtok includes state information, namely where in the string the last token ended,
while strtok_r does not. If pintos implemented strtok, it would have to have a
struct holding user program state info, which it does not.

>> A4: In Pintos, the kernel separates commands into a executable name
>> and arguments.  In Unix-like systems, the shell does this
>> separation.  Identify at least two advantages of the Unix approach.

- It gives each shell the ability to tokenize diffrently which is important for shells
that allow the user to pipe multiple commands together in one line.
- Doens't waste time in the kernal thread so the kernal can be doing more important things.

			     SYSTEM CALLS
			     ============

---- DATA STRUCTURES ----

>> B1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

// Got an array of these somewhere, file id is the index + 2
struct file_entry
{
	int user_id;
	struct file*;
}

>> B2: Describe how file descriptors are associated with open files. (see above)
>> Are file descriptors unique within the entire OS or just within a
>> single process?

Unique through whole OS.

---- ALGORITHMS ----

>> B3: Describe your code for reading and writing user data from the
>> kernel.

Reading:
Copies x bytes or less to the user space, ending either when we write
all the requested bytes have been written or we reach the end of file.

Writing:
Copies x bytes into the kernal space in the file system where x is the
number of bytes that the user requested.

Both:
Lookup on the file data table to make sure the user program owns that
open file and that it is open.

>> B4: Suppose a system call causes a full page (4,096 bytes) of data
>> to be copied from user space into the kernel.  What is the least
>> and the greatest possible number of inspections of the page table
>> (e.g. calls to pagedir_get_page()) that might result?  What about
>> for a system call that only copies 2 bytes of data?  Is there room
>> for improvement in these numbers, and how much?

Twice at most for both cases assuming that the user iterates through
the data once.

>> B5: Briefly describe your implementation of the "wait" system call
>> and how it interacts with process termination.

Call a conditional malloc on the file completing.

>> B6: Any access to user program memory at a user-specified address
>> can fail due to a bad pointer value.  Such accesses must cause the
>> process to be terminated.  System calls are fraught with such
>> accesses, e.g. a "write" system call requires reading the system
>> call number from the user stack, then each of the call's three
>> arguments, then an arbitrary amount of user memory, and any of
>> these can fail at any point.  This poses a design and
>> error-handling problem: how do you best avoid obscuring the primary
>> function of code in a morass of error-handling?  Furthermore, when
>> an error is detected, how do you ensure that all temporarily
>> allocated resources (locks, buffers, etc.) are freed?  In a few
>> paragraphs, describe the strategy or strategies you adopted for
>> managing these issues.  Give an example.

Returns -1. Works on my computer.

---- SYNCHRONIZATION ----

>> B7: The "exec" system call returns -1 if loading the new executable
>> fails, so it cannot return before the new executable has completed
>> loading.  How does your code ensure this?  How is the load
>> success/failure status passed back to the thread that calls "exec"?

Loading is all done in the syscall and not on a seprate thread.

>> B8: Consider parent process P with child process C.  How do you
>> ensure proper synchronization and avoid race conditions when P
>> calls wait(C) before C exits?  After C exits?  How do you ensure
>> that all resources are freed in each case?  How about when P
>> terminates without waiting, before C exits?  After C exits?  Are
>> there any special cases?

When a process ends, we keep the process ID marked as ended for a while
so that any new requests to wait on it return immediantly. When a 
process ends we go through our list of waits and notify the sumbitter
of the wait that the wait has ended.

---- RATIONALE ----

>> B9: Why did you choose to implement access to user memory from the
>> kernel in the way that you did?

Because this is a simple system and we are exreemly limited on implementation
time because of jobs and GDC.

>> B10: What advantages or disadvantages can you see to your design
>> for file descriptors?

Advantages:
- really simple so less moving parts to go wrong
- Don't waste memory with the +2/-2 index

Disadvantages:
- Waits on I/O, which can be very slow


>> B11: The default tid_t to pid_t mapping is the identity mapping.
>> If you changed it, what advantages are there to your approach?

Did not change. Mapping is the same, but we check that access is legit.

			   SURVEY QUESTIONS
			   ================

Answering these questions is optional, but it will help us improve the
course in future quarters.  Feel free to tell us anything you
want--these questions are just to spur your thoughts.  You may also
choose to respond anonymously in the course evaluations at the end of
the quarter.

>> In your opinion, was this assignment, or any one of the three problems
>> in it, too easy or too hard?  Did it take too long or too little time?

>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?

>> Is there some particular fact or hint we should give students in
>> future quarters to help them solve the problems?  Conversely, did you
>> find any of our guidance to be misleading?

>> Do you have any suggestions for the TAs to more effectively assist
>> students, either for future quarters or the remaining projects?

>> Any other comments?

